package pack.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class MyMemoJang extends JFrame implements ActionListener {
	JButton btnCopy = new JButton("Copy");
	JButton btnPaste = new JButton("Paste");
	JButton btnCut = new JButton("Cut");
	JButton btnDel = new JButton("Del");
	JPanel pn = new JPanel();

	JTextArea txtMemo = new JTextArea("");
	String copyText;

	// 메뉴아이템
	JMenuItem mnuNew, mnuSave, mnuOpen, mnuExit, mnuCopy, mnuPaste, mnuCut, mnuDel, mnuAbout, mnuEtc1, mnuEtc2;

	public MyMemoJang() {
		super("제목없음 - 메모장");
		initLayout();
		menuLayout();

		setBounds(200, 200, 400, 300);
		setVisible(true);
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				int re = JOptionPane.showConfirmDialog(MyMemoJang.this, "정말 종료하시겠습니까?", "종료",
						JOptionPane.YES_NO_OPTION);
				if (re == JOptionPane.YES_OPTION) {
					setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // JFrame을 종료할 때는 system.exit가 아니라 이렇게 해야 정말 종료가 됨.
																	// 공식이라고 생각해고 외워둬.
				} else {
					setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
				}
			}
		});
	}

	private void initLayout() {

		// 버튼 추가하기
		pn.add(btnCopy);
		pn.add(btnPaste);
		pn.add(btnCut);
		pn.add(btnDel);
		add("South", pn);

		// 스크롤바 만들기
		JScrollPane pane = new JScrollPane(txtMemo);
		// add("Center", txtMemo);
		add("Center", pane);

		btnCopy.addActionListener(this);
		btnPaste.addActionListener(this);
		btnCut.addActionListener(this);
		btnDel.addActionListener(this);
	}

	private void menuLayout() {
		JMenuBar menubar = new JMenuBar();

		JMenu mnuFile = new JMenu("파일"); // 주메뉴
		mnuNew = new JMenuItem("새로만들기"); // 부메뉴
		mnuOpen = new JMenuItem("열기...");
		mnuSave = new JMenuItem("저장...");
		mnuExit = new JMenuItem("종료");
		mnuFile.add(mnuNew);
		mnuFile.add(mnuOpen);
		mnuFile.add(mnuSave);
		mnuFile.addSeparator();
		mnuFile.add(mnuExit);

		JMenu mnuEdit = new JMenu("편집");
		mnuCopy = new JMenuItem("복사");
		mnuPaste = new JMenuItem("붙여넣기");
		mnuCut = new JMenuItem("잘라내기");
		mnuDel = new JMenuItem("삭제");
		mnuEdit.add(mnuCopy);
		mnuEdit.add(mnuPaste);
		mnuEdit.add(mnuCut);
		mnuEdit.add(mnuDel);

		JMenu mnuHelp = new JMenu("도움말");
		mnuAbout = new JMenuItem("메모장 정보...");

		// 메뉴 속에 메뉴를 넣는 방법
		JMenu mnuEtc = new JMenu("기타");
		mnuEtc1 = new JMenuItem("계산기");
		mnuEtc2 = new JMenuItem("메모장");
		mnuEtc.add(mnuEtc1);
		mnuEtc.add(mnuEtc2);
		mnuHelp.add(mnuAbout);
		mnuHelp.add(mnuEtc);

		menubar.add(mnuFile); // 메뉴바에 메뉴 장착
		menubar.add(mnuEdit); // 메뉴바에 메뉴 장착
		menubar.add(mnuHelp); // 메뉴바에 메뉴 장착

		setJMenuBar(menubar); // frame에 메뉴바 장착

		mnuNew.addActionListener(this);
		mnuOpen.addActionListener(this);
		mnuSave.addActionListener(this);
		mnuExit.addActionListener(this);

		mnuCopy.addActionListener(this);
		mnuPaste.addActionListener(this);
		mnuCut.addActionListener(this);
		mnuDel.addActionListener(this);

		mnuAbout.addActionListener(this);
		mnuEtc1.addActionListener(this);
		mnuEtc2.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == btnCopy || e.getSource() == mnuCopy) {
			// System.out.println(txtMemo.getSelectedText()); //뒤지면 다 나와 선택한 값만 저장하기
			copyText = txtMemo.getSelectedText(); // 복사
		} else if (e.getSource() == btnPaste || e.getSource() == mnuPaste) {
			// txtMemo.setText(copyText); //기존 문자열 싹 없애고 덮어써버려;; 그 지점에만 딱! 붙여넣으려면?
			int po = txtMemo.getCaretPosition();
			txtMemo.insert(copyText, po);
		} else if (e.getSource() == btnCut) {
			copyText = txtMemo.getSelectedText(); // 범위내의 문자열은 가지고 있어야 돼
			int start = txtMemo.getSelectionStart();
			int end = txtMemo.getSelectionEnd();
			txtMemo.replaceRange("", start, end);
		} else if (e.getSource() == btnDel) { // 컷이랑 비슷해서 딜리트 만들어 놓고 얘를 불러다 쓰는 경우도 있음
			int start = txtMemo.getSelectionStart();
			int end = txtMemo.getSelectionEnd();
			txtMemo.replaceRange("", start, end);
		}

		else if (e.getSource() == mnuNew) {
			txtMemo.setText("");
			this.setTitle("제목없음 - 메모장");
		} else if (e.getSource() == mnuOpen) {

		} else if (e.getSource() == mnuSave) {
			try {
				BufferedWriter writer = new BufferedWriter(new FileWriter("c:/work/abc.txt"));
				writer.write(txtMemo.getText());
				writer.close();
				this.setTitle("abc.txt-메모장");
			} catch (Exception e2) {
				System.out.println("저장오류" + e2);
			}

		} else if (e.getSource() == mnuExit) {

		} else if (e.getSource() == mnuAbout) {

		} else if (e.getSource() == mnuEtc1) {

		} else if (e.getSource() == mnuEtc2) {

		}

		txtMemo.requestFocus();

	}

	public static void main(String[] args) {
		new MyMemoJang();
	}

}
